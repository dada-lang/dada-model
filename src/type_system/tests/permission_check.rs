use formality_core::test_util::ResultTestExt;

use crate::{dada_lang::term, type_system::check_program};

/// Check sharing a field from a leased value errs.
#[test]
#[allow(non_snake_case)]
fn share_field_of_leased_value() {
    check_program(
        &term(
            "
                class Foo {
                    i: Int;
                }

                class TheClass {
                    fn empty_method(my self) {
                        let foo = new Foo(22);
                        let bar = lease foo;
                        let i = share foo.i;
                        give bar;
                        ();
                    }
                }
            ",
        ),
    ).assert_err(
        expect_test::expect![[r#"
            check program `class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }`

            Caused by:
                0: check class named `TheClass`
                1: check method named `empty_method`
                2: check function body
                3: judgment `can_type_expr_as { expr: { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; }, as_ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                     the rule "can_type_expr_as" failed at step #0 (src/file.rs:LL:CC) because
                       judgment `type_expr_as { expr: { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; }, as_ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                         the rule "type_expr_as" failed at step #0 (src/file.rs:LL:CC) because
                           judgment `type_expr { expr: { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; }, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                             the rule "block" failed at step #0 (src/file.rs:LL:CC) because
                               judgment `type_block { block: { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; }, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                 the rule "place" failed at step #0 (src/file.rs:LL:CC) because
                                   judgment `type_statements_with_final_ty { statements: [let foo = new Foo (22) ;, let bar = lease foo ;, let i = foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                     the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                       judgment `type_statements_with_final_ty { statements: [let bar = lease foo ;, let i = foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let bar = lease foo ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: lease foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: lease, place: foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                           judgment `type_statements_with_final_ty { statements: [let i = foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [foo : Foo, bar : leased (foo) Foo], access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [bar : leased (foo) Foo], access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: leased (foo) Foo, access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: leased (foo), access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                     the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                       judgment `type_statements_with_final_ty { statements: [let bar = lease foo ;, let i = foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let bar = lease foo ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {foo} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: lease foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {foo} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: lease, place: foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {foo} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let bar = lease foo ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: lease foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: lease, place: foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                           judgment `type_statements_with_final_ty { statements: [let i = foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [foo : Foo, bar : leased (foo) Foo], access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [bar : leased (foo) Foo], access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: leased (foo) Foo, access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: leased (foo), access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                           judgment `type_statements_with_final_ty { statements: [let i = foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [foo : Foo, bar : leased (foo) Foo], access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [bar : leased (foo) Foo], access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: leased (foo) Foo, access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: leased (foo), access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                 the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [foo : Foo, bar : leased (foo) Foo], access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [bar : leased (foo) Foo], access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: leased (foo) Foo, access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: leased (foo), access: share, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = lease foo ; let i = foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : leased (foo) Foo, i : shared (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`"#]],
    )
}

/// Check sharing a field from a shared value is ok.
#[test]
#[allow(non_snake_case)]
fn share_field_of_shared_value() {
    check_program(&term(
        "
            class Foo {
                i: Int;
            }

            class TheClass {
                fn empty_method(my self) {
                    let foo = new Foo(22);
                    let bar = share foo;
                    let i = share foo.i;
                    give bar;
                    ();
                }
            }
        ",
    ))
    .assert_ok(expect_test::expect!["()"])
}

/// Check leasing a field from a shared value is not ok.
#[test]
#[allow(non_snake_case)]
fn lease_field_of_shared_value() {
    check_program(
        &term(
            "
            class Foo {
                i: Int;
            }

            class TheClass {
                fn empty_method(my self) {
                    let foo = new Foo(22);
                    let bar = share foo;
                    let i = lease foo.i;
                    give bar;
                    ();
                }
            }
        ",
        ),
    ).assert_err(
        expect_test::expect![[r#"
            check program `class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }`

            Caused by:
                0: check class named `TheClass`
                1: check method named `empty_method`
                2: check function body
                3: judgment `can_type_expr_as { expr: { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; }, as_ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                     the rule "can_type_expr_as" failed at step #0 (src/file.rs:LL:CC) because
                       judgment `type_expr_as { expr: { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; }, as_ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                         the rule "type_expr_as" failed at step #0 (src/file.rs:LL:CC) because
                           judgment `type_expr { expr: { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; }, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                             the rule "block" failed at step #0 (src/file.rs:LL:CC) because
                               judgment `type_block { block: { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; }, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                 the rule "place" failed at step #0 (src/file.rs:LL:CC) because
                                   judgment `type_statements_with_final_ty { statements: [let foo = new Foo (22) ;, let bar = foo ;, let i = lease foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                     the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                       judgment `type_statements_with_final_ty { statements: [let bar = foo ;, let i = lease foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let bar = foo ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: share, place: foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                           judgment `type_statements_with_final_ty { statements: [let i = lease foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = lease foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: lease foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = lease foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: lease foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [foo : Foo, bar : shared (foo) Foo], access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [bar : shared (foo) Foo], access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: shared (foo) Foo, access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: shared (foo), access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                     the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                       judgment `type_statements_with_final_ty { statements: [let bar = foo ;, let i = lease foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let bar = foo ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {foo} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {foo} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: share, place: foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {foo} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let bar = foo ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: share, place: foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                           judgment `type_statements_with_final_ty { statements: [let i = lease foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = lease foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: lease foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = lease foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: lease foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [foo : Foo, bar : shared (foo) Foo], access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [bar : shared (foo) Foo], access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: shared (foo) Foo, access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: shared (foo), access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                           judgment `type_statements_with_final_ty { statements: [let i = lease foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = lease foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: lease foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = lease foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: lease foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = lease foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: lease foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [foo : Foo, bar : shared (foo) Foo], access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [bar : shared (foo) Foo], access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: shared (foo) Foo, access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: shared (foo), access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = lease foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: lease foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                 the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [foo : Foo, bar : shared (foo) Foo], access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [bar : shared (foo) Foo], access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: shared (foo) Foo, access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: shared (foo), access: lease, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = lease foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : leased (foo . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`"#]],
    )
}

/// Check giving a field from a shared value is not ok.
#[test]
#[allow(non_snake_case)]
fn give_field_of_shared_value() {
    check_program(
        &term(
            "
            class Foo {
                i: Int;
            }

            class TheClass {
                fn empty_method(my self) {
                    let foo = new Foo(22);
                    let bar = share foo;
                    let i = give foo.i;
                    give bar;
                    ();
                }
            }
        ",
        ),
    ).assert_err(
        expect_test::expect![[r#"
            check program `class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }`

            Caused by:
                0: check class named `TheClass`
                1: check method named `empty_method`
                2: check function body
                3: judgment `can_type_expr_as { expr: { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; }, as_ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                     the rule "can_type_expr_as" failed at step #0 (src/file.rs:LL:CC) because
                       judgment `type_expr_as { expr: { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; }, as_ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                         the rule "type_expr_as" failed at step #0 (src/file.rs:LL:CC) because
                           judgment `type_expr { expr: { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; }, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                             the rule "block" failed at step #0 (src/file.rs:LL:CC) because
                               judgment `type_block { block: { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; }, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                 the rule "place" failed at step #0 (src/file.rs:LL:CC) because
                                   judgment `type_statements_with_final_ty { statements: [let foo = new Foo (22) ;, let bar = foo ;, let i = give foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                     the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                       judgment `type_statements_with_final_ty { statements: [let bar = foo ;, let i = give foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let bar = foo ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: share, place: foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                           judgment `type_statements_with_final_ty { statements: [let i = give foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = give foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: give foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                     the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = give foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: give foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                     the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [foo : Foo, bar : shared (foo) Foo], access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [bar : shared (foo) Foo], access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: shared (foo) Foo, access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: shared (foo), access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                     the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                       judgment `type_statements_with_final_ty { statements: [let bar = foo ;, let i = give foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let bar = foo ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {foo} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {foo} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: share, place: foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {foo} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let bar = foo ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: share, place: foo, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, foo} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                           judgment `type_statements_with_final_ty { statements: [let i = give foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = give foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: give foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                     the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = give foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: give foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                     the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [foo : Foo, bar : shared (foo) Foo], access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [bar : shared (foo) Foo], access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: shared (foo) Foo, access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: shared (foo), access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                           judgment `type_statements_with_final_ty { statements: [let i = give foo . i ;, give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = give foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: give foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo} } }` failed at the following rule(s):
                                                     the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = give foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: give foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                     the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = give foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: give foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                     the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [foo : Foo, bar : shared (foo) Foo], access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [bar : shared (foo) Foo], access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: shared (foo) Foo, access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: shared (foo), access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = give foo . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: give foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                     the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                 the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [foo : Foo, bar : shared (foo) Foo], access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [bar : shared (foo) Foo], access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: shared (foo) Foo, access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: shared (foo), access: give, place: foo . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo . i} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo . i, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo . i, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo . i, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo . i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo . i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo . i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {bar, foo} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give bar ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo . i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo, i} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give bar ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: bar, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let foo = new Foo (22) ; let bar = foo ; let i = give foo . i ; give bar ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, foo : Foo, bar : shared (foo) Foo, i : Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, bar, foo} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`"#]],
    )
}

/// Check sharing a field from a leased value errs.
#[test]
#[allow(non_snake_case)]
fn share_field_of_leased_value_after_explicit_give() {
    check_program(&term(
        "
                class Foo {
                    i: Int;
                }

                class TheClass {
                    fn empty_method(my self) {
                        let foo = new Foo(22);
                        let bar = lease foo;
                        give bar;
                        let i = share foo.i;
                        ();
                    }
                }
            ",
    ))
    .assert_ok(expect_test::expect!["()"])
}
/// Check sharing a field from a leased value errs.
#[test]
#[allow(non_snake_case)]
fn share_field_of_leased_value_without_explicit_give() {
    check_program(&term(
        "
                class Foo {
                    i: Int;
                }

                class TheClass {
                    fn empty_method(my self) {
                        let foo = new Foo(22);
                        let bar = lease foo;
                        let i = share foo.i;
                        ();
                    }
                }
            ",
    ))
    .assert_ok(expect_test::expect!["()"])
}

#[test]
fn share_field_of_leased_value_but_lease_variable_is_dead() {
    // Here, the variable `q` is dead, but its restrictions must
    // still be enforced because `r` is live.
    check_program(&term(
        "
                class Foo {
                    i: Int;
                }

                class TheClass {
                    fn empty_method(my self) {
                        let p = new Foo(22);
                        let q = lease p;
                        let r = share q;
                        let i = share p.i;
                        give r;
                        ();
                    }
                }
            ",
    ))
    .assert_err(expect_test::expect![[r#"
        check program `class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }`

        Caused by:
            0: check class named `TheClass`
            1: check method named `empty_method`
            2: check function body
            3: judgment `can_type_expr_as { expr: { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; }, as_ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                 the rule "can_type_expr_as" failed at step #0 (src/file.rs:LL:CC) because
                   judgment `type_expr_as { expr: { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; }, as_ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                     the rule "type_expr_as" failed at step #0 (src/file.rs:LL:CC) because
                       judgment `type_expr { expr: { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; }, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                         the rule "block" failed at step #0 (src/file.rs:LL:CC) because
                           judgment `type_block { block: { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; }, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                             the rule "place" failed at step #0 (src/file.rs:LL:CC) because
                               judgment `type_statements_with_final_ty { statements: [let p = new Foo (22) ;, let q = lease p ;, let r = q ;, let i = p . i ;, give r ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                 the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                   judgment `type_statements_with_final_ty { statements: [let q = lease p ;, let r = q ;, let i = p . i ;, give r ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                     the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                       judgment `type_statement { statement: let q = lease p ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p} } }` failed at the following rule(s):
                                         the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                           judgment `type_expr { expr: lease p, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p} } }` failed at the following rule(s):
                                             the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `access_permitted { access: lease, place: p, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p} } }` failed at the following rule(s):
                                                 the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                   condition evaluted to false: `!flow.is_moved(&place)`
                                     the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                       judgment `type_statements_with_final_ty { statements: [let r = q ;, let i = p . i ;, give r ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let r = q ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: share, place: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let r = q ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: share, place: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                           judgment `type_statements_with_final_ty { statements: [let i = p . i ;, give r ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = p . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q, r} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q, r} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q, r} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = p . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: leased (p) Foo, access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: leased (p), access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = p . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: leased (p) Foo, access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: leased (p), access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give r ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, p, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, p, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, p, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                 the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                   judgment `type_statements_with_final_ty { statements: [let q = lease p ;, let r = q ;, let i = p . i ;, give r ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                     the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                       judgment `type_statement { statement: let q = lease p ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {p} } }` failed at the following rule(s):
                                         the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                           judgment `type_expr { expr: lease p, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {p} } }` failed at the following rule(s):
                                             the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `access_permitted { access: lease, place: p, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {p} } }` failed at the following rule(s):
                                                 the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                   condition evaluted to false: `!flow.is_moved(&place)`
                                     the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                       judgment `type_statement { statement: let q = lease p ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p} } }` failed at the following rule(s):
                                         the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                           judgment `type_expr { expr: lease p, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p} } }` failed at the following rule(s):
                                             the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `access_permitted { access: lease, place: p, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p} } }` failed at the following rule(s):
                                                 the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                   condition evaluted to false: `!flow.is_moved(&place)`
                                     the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                       judgment `type_statements_with_final_ty { statements: [let r = q ;, let i = p . i ;, give r ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let r = q ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: share, place: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let r = q ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: share, place: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                           judgment `type_statements_with_final_ty { statements: [let i = p . i ;, give r ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = p . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q, r} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q, r} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q, r} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = p . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: leased (p) Foo, access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: leased (p), access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = p . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: leased (p) Foo, access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: leased (p), access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give r ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, p, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, p, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, p, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                     the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                       judgment `type_statements_with_final_ty { statements: [let r = q ;, let i = p . i ;, give r ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let r = q ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {p, q} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {p, q} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: share, place: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {p, q} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let r = q ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {q} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {q} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: share, place: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {q} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let r = q ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: share, place: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                           judgment `type_statement { statement: let r = q ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q} } }` failed at the following rule(s):
                                             the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                               judgment `type_expr { expr: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q} } }` failed at the following rule(s):
                                                 the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `access_permitted { access: share, place: q, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q} } }` failed at the following rule(s):
                                                     the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                       condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                           judgment `type_statements_with_final_ty { statements: [let i = p . i ;, give r ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = p . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q, r} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q, r} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q, r} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = p . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: leased (p) Foo, access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: leased (p), access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = p . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: leased (p) Foo, access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: leased (p), access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give r ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, p, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, p, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, p, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                         the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                           judgment `type_statements_with_final_ty { statements: [let i = p . i ;, give r ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = p . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {p, q, r} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {p, q, r} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {p, q, r} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = p . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {r} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {r} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {r} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {r} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {r} } }` failed at the following rule(s):
                                                                 the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {r} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {r} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: leased (p) Foo, access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {r} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: leased (p), access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {r} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = p . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q, r} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q, r} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, p, q, r} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                           condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = p . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: leased (p) Foo, access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: leased (p), access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, r} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = p . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                 the rule "cons, moved variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: leased (p) Foo, access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: leased (p), access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                               judgment `type_statement { statement: let i = p . i ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                 the rule "let" failed at step #0 (src/file.rs:LL:CC) because
                                                   judgment `type_expr { expr: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                     the rule "share|lease place" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `access_permitted { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                         the rule "access_permitted" failed at step #1 (src/file.rs:LL:CC) because
                                                           judgment `env_permits_access { access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                             the rule "env_permits_access" failed at step #1 (src/file.rs:LL:CC) because
                                                               judgment `variables_permit_access { variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                 the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                   judgment `variables_permit_access { variables: [p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                     the rule "cons, initialized variable" failed at step #3 (src/file.rs:LL:CC) because
                                                                       judgment `variables_permit_access { variables: [q : leased (p) Foo, r : shared (q) leased (p) Foo], access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                         the rule "cons, initialized variable" failed at step #2 (src/file.rs:LL:CC) because
                                                                           judgment `ty_permits_access { ty: leased (p) Foo, access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                             the rule "ty" failed at step #0 (src/file.rs:LL:CC) because
                                                                               judgment `perm_permits_access { perm: leased (p), access: share, place: p . i, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo], existentials: [], assumptions: {} }, flow: Flow { moved_places: {} } }` failed at the following rule(s):
                                                                                 the rule "disjoint" failed at step #0 (src/file.rs:LL:CC) because
                                                                                   condition evaluted to false: `place_disjoint_from_all_of(&accessed_place, &perm_places)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give r ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {q, r} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {i, p, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {i, p, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {i, p, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {i, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {i, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {i, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, p, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, p, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, p, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                             the rule "cons" failed at step #2 (src/file.rs:LL:CC) because
                                               judgment `type_statements_with_final_ty { statements: [give r ;, () ;], ty: (), env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, p, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, p, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, p, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, i, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`
                                                 the rule "cons" failed at step #1 (src/file.rs:LL:CC) because
                                                   judgment `type_statement { statement: give r ;, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                     the rule "expr" failed at step #0 (src/file.rs:LL:CC) because
                                                       judgment `type_expr { expr: give r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                         the rule "give place" failed at step #0 (src/file.rs:LL:CC) because
                                                           judgment `access_permitted { access: give, place: r, env: Env { program: class Foo { i : Int ; } class TheClass { fn empty_method (Some(my self)) -> () { let p = new Foo (22) ; let q = lease p ; let r = q ; let i = p . i ; give r ; () ; } }, universe: universe(0), in_scope_vars: [], local_variables: [self : my TheClass, p : Foo, q : leased (p) Foo, r : shared (q) leased (p) Foo, i : shared (p . i) Int], existentials: [], assumptions: {} }, flow: Flow { moved_places: {self, q, r} } }` failed at the following rule(s):
                                                             the rule "access_permitted" failed at step #0 (src/file.rs:LL:CC) because
                                                               condition evaluted to false: `!flow.is_moved(&place)`"#]])
}
